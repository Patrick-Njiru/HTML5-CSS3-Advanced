/* 1 - SPECIFICITY */
/* 
    When you select same elements and apply different styles, 
    the style with the higher specificity wins. However, 
    if they both have the same level of specificity, the style that
    comes last is used since CSS read from top to bottom.
    
    Hover over a selector to view its specificity in the pop-up
*/
/*TAG specificity (0,0,1) = 1 */
p { color: blue ; } 

/* specificity (0,0,1) = 1 */
div { color: red; } 

/*TAG+TAG specificity (0,0,2) = 2 */
div p { color: red; } 

/*TAG+TAG+TAG+TAG specificity (0,0,4) = 4 */
body header div p { color: red; } 

/*ID - specificity (1,0,0) = 100*/
#p {color: orange;} 

/*CLASS - specificity (0,1,0) = 10*/
.p-first { color: yellow;} 

/* ID+ClASS (1,1,0) = 110*/
#p.p-first { background: green; } 

/* ID+CLASS+TAG specificity (1,1,1) = 111*/
#p.p-first p { background: blue; } 

/* ID+CLASS+TAG+TAG specificity (1,1,2) = 112*/
#p .p-first div p { background: indigo; } 

/* Pseudo-child-selector specificity (0,1,1) = 11*/
p:first-child {color: violet;} 


/*******************************************************/
/* 2 - BOX MODEL */
/* 
   Refers to how you display an element and it's properties on the screen.
   
   The element's innermost box (content box) is determined by the width and height properties, followed by the padding box, the border box and finally the margin box.

   Offset-width = width + left and right padding + left and right margin + left and right border-width

   Offset-height = height + top and bottom padding + top and bottom margin + top and bottom border-width

*/
/* 
    The box-sizing: border-box property ensures that the offset-width and height do not exceed the width and height properties specified. 

    With this property, the size of the content box adjusts to fit the padding, margin and border boxes. 
*/
* { box-sizing: border-box;}

div {
    border: 1em solid aqua;
    padding: 5px 10px;
    margin: 2rem;
    width: 70vw; /* 70% of the screen width */
    height: 50vh;
}


/*******************************************************/
/* 3 - VARIABLES */
/* 
    You can create variables in CSS3. These is done in the properties section. 

    Once created, the variable can only be used on the selected element and it's children. It is scoped.

    The variable is usually given a name that is similar to what it should do or represent

    One advanyage of using variables is that when you need to change the value of a certain property throughout the entire website, you only change it at one point in CSS - where you defined it
*/

:root { /* Global variable - alternatives selector is 'html' */
    --bgcolor: green;
}
/* Call it as follows */
body { background: var(--bgcolor); }

/* 
    You can specifiy a default fallback value in case the variable is not defined.

    If the variable value is invalid, the fallback option will not be called.
*/

div { background-color: var(--bgcolor, greenyellow); }


/*******************************************************/
/* 4 - CALC() */
/* Allows you to access the values of variables and have computations */

/* You can make various size properties dynamic as the screen size changes */
h1 { font-size: calc(32px + 5vw) } /* use different value, eg px + vw*/

/* Using Calc() with variables */
/* Ensure to leave spaces between values when using calc to avoid errors (especially with addition and subtraction) */

html {
    --standard-font-size: 20px;
    --h1-font-size: calc(var(--standard-font-size) * 2); /* 40px */
    --p-font-size: calc(var(--standard-font-size) + 4px);
    --divpadding: 20px
}

body {
    background: var(--bgcolor);
    font-size: var(--p-font-size);
}

.somediv { 
    padding: var(--divpadding);
    background: var(--bgdiv, red); /* --bgdiv is not defined. red will be used.*/
}


/*******************************************************/
/* 5 - PSEUDO-SELECTORS */
/* To view a list of al pseudo-selectors, type : - colon */

p:hover { /* active, focus */
    font-weight: bold;
    font-style: oblique; 
}

#banner { display: none; }

input:focus + #banner { /* banner becomes visible when you focus on the input field */
    display: block; 
}

/* first-child, last-child, nth-child  */
body p:nth-child(3) { /* Select the third p that is a child of body */
    font-size: calc(var(--standard-font-size) - 3px);
}

body p:nth-child(2n) {  /* all even ps */
    font-size: calc(var(--standard-font-size) - 3px);
}

body p:nth-child(2n-1) {  /* all odd ps */
    font-size: calc(var(--standard-font-size) - 3px);
}

input:enabled + #banner { /* Assuming the input can be enabled and disabled */
    display: none;
}

/* try others */


/*******************************************************/
/* 6 - PSEUDO-ELEMENTS */
/* 
    Does not work with self-closing/empty elements like img, hr, br, input
    they are symbolized by double colon - ::
*/

/* Adding content to already existing content in the selected element. ::before adds at the beginning and ::after at the end */
#banner::before {
    content: 'hello World!'; /* must have the content property - whose value must be a string - to be visible */
}

#banner::after { content: 'Hello World!'; }

/* change properties of the first letter in the element */
#banner::first-letter { 
    text-transform: lowercase;
    color: red;
}

/* Adding pseudo-selectors to pseudo-elements */
/* You must start with the pseudo-selector followed by the pseudo-element */

#banner:hover::before { 
    color: #fff;
    background: #000;
    text-transform: uppercase;
}

/* to create an empty vertical space at the beggining of an element with a given height. common */
body::before {
    display: block;
    content: '';
    height: '50px';
}


/*******************************************************/
/* 7 - ATTR - ATTRIBUTE FUNCTION */
/* 
    Returns the value of the attribute whose name is indicated in the selected element.
    It can be any attribute ranging from standard attributes like id,class to any other that you create
*/
/* example in HTML - <div id='section1' ending='Thank you for your time!'>...</div> . Then... */
#section1::before {
    content: attr(ending); /* = 'Thank you for... */
    color: gold;
    background: #000;
}

/*******************************************************/
/* !IMPORTANT */
/* 
    !important implies that the selected element should have the value of this style given the first priority even if it styled differently elsewhere 
*/
p {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: 2rem !important; 
}


/*******************************************************/
/* 8 - ADVANCED SELECTORS */

/* SIBLING SELECTOR */
/* siblings are elements with the same order of hierarchy in HTML */

/* Immediate Sibling Selector */
h1 + p { font-weight: 600;} /* the p sibling that is right after h1 in HTML */

/* 
    if we have:
    <h1>...</h1>
    <div>...</div>
    <p>...</p>
    the style above will not apply since p is not the immediate sibling of h1, div is.
*/

/* All Siblings Selector  */
 h1 ~ p { font-weight: bolder; } /* all ps that are siblings of h1 */


/* Direct Child Selector - > */
/* The styles won't apply to h1 tags that are children other tags that are children of div#one */
div#one > h1 { background-blend-mode: color-dodge; }


/* ASTERICK/STAR SELECTOR - * */
/* 
    The asterick/star sign '*' indicates every single element on the page or all children of a given parent.  
*/

/* apply to the section element. Some properties may be inheritted by its children unless given a different value */
section { color: yellow; }

/* apply  to all children of section element regardless of their previous properties' values. It may only fail to apply to certain children due to specificity reasons or use of !important */
section * { color: yellow; }


/* ATTRIBUTE SELECTORS */

/*  tag[attribute = value] - attribute with a specific value*/
ul li[name='email'] { /* li with attribute name whose value is 'email' */
    display: inline; 
    list-style-type: lower-roman;    
}

/*  tag[attribute] - all elements with the given attribute regardless of their values. */
button[title] { padding: 5px; }

/* tag[attribute*='value'] - all elements whose selcted attribute starts with the given value. The value can be a letter(s) or word*/
button[title*='red'] { padding: 5px; }

/* tag[attribute$='value'] - all elements whose selcted attribute end with the given value. The value can be a letter(s) or word */
button[title*='d'] { padding: 5px; }



/*  THE :NOT() SELECTOR */
/* Select specific elements without the provided attribute */
div:not([id]) { height: auto; }
div:not([id='section']) { height: auto; }

/* ps that don't have the class value last */
p:not(.last) { box-sizing: border-box; }
